---
layout: post
author: Nathan Epstein
title:  "Facebook Interview Guide"
date:   2015-02-05 12:00:00
categories: jekyll update
img: "../img/fb.png"
---

## Introduction

The following material is based on my notes taken at the event "Facebook Workshop: Mastering your Technical Interview" given at Facebook's NYC office on 02/03/2015.

Some material is Facebook specific but most is broadly applicable to interviewing at other companies.

##Purpose of Interviewing

The only way to tell if someone makes a great employee is to work with them. This is not scalable. Interviewers are trying to determine, with limited information, if you're awesome.

Correctly answering questions is great. Effectively communicating your understanding/experience is better.

##Getting Noticed

1) Know what makes you distinct from your peers. Have a real answer to this question. Knowing how to code is necessary but not sufficient.

2) Be able to talk about your experience. This seems obvious but many people can't explain their work clearly.

3) Be passionate about something (ideally but not necessarily relevant to the position). Lack of passion about anything is a red flag.

##Important Knowledge
<img src="/../img/fbTopics.png">

##Interviewing tips

###General

1) As you answer a technical question, always be talking. Silently thinking about a technical problem gives the interviewer no way to evaluate you. Talk about your approach as well as pitfalls/tradeoffs.

2) As you answer a technical question, ask questions of the interviewer. Ensure that you're on the same page (i.e. your idea of the solution and her idea of the solution match up).

3) Work on problems at a whiteboard and impose a time limit. You are used to writing code on your computer. Whiteboarding is a different experience.

4) For phone interviews, make sure that you have headphones and a quiet space (seems obvious but some people don't do it).

5) Be prepared for common questions (e.g. recent/favorite/challenging project).

6) When talking about group projects, focus on your individual contribution.

7) Have prepared questions (seems obvious but people forget).

8) Be prepared to talk about anything that you put on your resume (alternatively, don't put anything on your resume that you don't really know).

9) In technical problems, allude to obvious brute force solutions to demonstrate awareness. Don't bother implementing them unless you can't do better.

10) Focus on optimizing after you have a working solution.

###Facebook

1) Fundamental CS topics are important. Puzzle questions aren't.

2) A working solution beats a perfect solution (arguably general advice but heavily emphasized at FB).

3) Choose any language. *Know* the one you choose.

##Sample Questions

1) Given a sorted array of integers (of size N) and a target integer, determine how many times the target integer occurs in the array.

2) Given a binary tree, print out the tree, level-by-level, with each level on a separate line.




