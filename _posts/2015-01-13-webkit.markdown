---
layout: post
author: Nathan Epstein
title:  "Building A Desktop REPL"
date:   2015-01-13 12:00:00
categories: jekyll update
img: "../img/webkit.png"
---

## Intro

The goal of this tutorial is to introduce <a href="https://github.com/rogerwang/node-webkit">NW.js (previously Node Webkit)</a> and demonstrate integration with <a href="https://angularjs.org/">AngularJS</a> by building a primitive desktop REPL application. It assumes no knowledge of NW.js but some familiarity with AngularJS is helpful.

To keep things simple, our REPL will only support JavaScript (though adding other languages is not hard). Additionally, we will not do any styling/design.

## Getting started

The first thing you will need to do is install the node webkit app which you can do <a href="https://github.com/rogerwang/node-webkit">here</a>.

Next, we'll need to make a directory for our project and install angular. From the command line execute:

`$ mkdir myProject`

`$ cd myProject`

`$ bower install angular#1.2.28`

## Hello World
 To run a 'Hello World' desktop application we need two files. We need an index.html file to render and a package.json file to configure our application.

 From the command line execute:

 `touch main.html`

 `touch package.json`

 Next lets go into index.html and add some content:

 {% highlight html %}
<html>
  <h1>Hello world!</h1>
</html>
 {% endhighlight %}

And modify package.json as well:

{% highlight json %}
{
  "name":"myREPL",
  "main":"main.html"
}
{% endhighlight %}

And that's all we need for our very simple desktop app.

To run the app on OSX:

`$ /path/to/node-webkit.app/Contents/MacOS/node-webkit .`

To run the app on another OS:

`$ /path/to/nw .`

Note: The file package.json must be in the current directory when these are executed.

## Remove the Toolbar

You'll notice that your app is launched in what looks very much like a browser. Specifically, there is a toolbar at the top which includes a search field.

This bar is there for development purposes. However, we do not want our desktop app to look like a web browser. Modify the package.json to look like this:

{% highlight json %}
{
  "name": "test app",
  "main": "main.html",
  "window":{
    "toolbar": false
  }
}
{% endhighlight %}


## Implementing a REPL

We're now ready to begin implementing our REPL. Let's look at exactly how we're going to do this.

1) Show a text area for the user to type executable code and a button to submit the code.

2) Write the submitted code to a file called myScript.js.

3) Hide the original view and show the submitted code's ouput and a button to return to the initial view.

## Modify our HTML

We'll begin by setting up our HTML and build a controller to implement the functionality afterword.

Assuming our controller will be called mainCtrl and written to a file named main.js, we will want the head and body of the HTML file to be as follows. Note the inclusion of `ng-app='repl'` in the opening HTML tag.

{% highlight html %}
<html ng-app='repl'>
  <head>
    <script src="bower_components/angular/angular.min.js"></script>
    <script src="main.js"></script>
  </head>
  <body ng-controller='mainCtrl as main'></body>
</html>
{% endhighlight %}

Next we'll implement the code submission view. For that we need a textarea and a button which will call a function which takes the submitted text as an argument.

{% highlight html %}
<html ng-app='repl'>
  <head>
    <script src="bower_components/angular/angular.min.js"></script>
    <script src="main.js"></script>
  </head>
  <body ng-controller='mainCtrl as main'>
    <div ng-show='input'>
      <textarea ng-model='script'></textarea>
      <button ng-click='submit(script)'>Submit</button>
    </div>
  </body>
</html>
{% endhighlight %}

Note the use of the <a href="https://docs.angularjs.org/api/ng/directive/ngShow">ngShow directive</a> in the div that wraps our code submission view. The use of `ng-show='input'` means that the div will only be visible if the boolean `$scope.input` has value `true`.

Using <a href="https://docs.angularjs.org/api/ng/directive/ngModel">ngModel</a>, the contents of the textarea are assigned the variable `script` which is passed to the `$scope.submit` function.

Next let's add the output view.

{% highlight html %}
<html ng-app='repl'>
  <head>
    <script src="bower_components/angular/angular.min.js"></script>
    <script src="main.js"></script>
  </head>
  <body ng-controller='mainCtrl as main'>
    <!-- input view -->
    <div ng-show='input'>
      <textarea ng-model='script'></textarea>
      <button ng-click='submit(script)'>Submit</button>
    </div>
    <!-- end of input view -->
    <!-- output view -->
    <div ng-show='!input'>
      {% raw %}{{output}}{% endraw %}
      <button ng-click='back()'>Back</button>
    </div>
    <!-- end of output view -->
  </body>
</html>
{% endhighlight %}

Our new code is the four lines under the comment `<!-- output view -->`. We have a div which will only be visible when `$scope.input` is `false`. Inside the div we render `$scope.output` and include a button which executes the function `$scope.back`.

That's it for our HTML! Now we just need to implement the functions on our mainCtrl controller.

## Making mainCtrl

Our HTML file expects the controller to be in main.js so let's create that.

`$ touch main.js`

Now in main.js, we will need to create the controller and initialize `$scope.input` to be `true`.

{% highlight javascript %}
angular.module('repl',[])
       .controller('mainCtrl', ['$scope',function mainCtrl($scope){
          $scope.input = true;
        }]);
{% endhighlight %}

Next, we need to define `$scope.back` and `$scope.submit`. In `$scope.back`, all we need to do is set `$scope.input` to `true` (because we'll only be calling it from the output view) so let's do that before moving on to the `$scope.submit` function.

{% highlight javascript %}
angular.module('repl',[])
       .controller('mainCtrl', ['$scope',function mainCtrl($scope){
          $scope.input = true;

          $scope.back = function(){
            $scope.input = true;
          };

          $scope.submit = function(text){
            // do something here..
          };

        }]);
{% endhighlight %}

The `$scope.submit` we will take the `text` argument and write it to a file which will then be executed. After that we render the results.

If this were a web app, main.js would be front end JavaScript. However, because we are using NW.js, *we can execute Node.js commands in our controller*.

Using Node.js, we can implement our `$scope.submit` function as follows:

{% highlight javascript %}
$scope.submit = function(text){
  $scope.input = false; //set input to false to change the view

  //require the appropriate node modules
  var fs = require('fs');
  var exec = require('child_process').exec;

  //write myScript.js from the text argument
  fs.writeFile('myScript.js',text,function(){
    //use node's child_process to execute myScript.js as a callback
    var child = exec('node myScript.js',function(err,res){
      $scope.output = res; //set $scope.output to the out of myScript.js
      $scope.$apply(); //call $scope.$apply() to ensure the updated view
    });
  });
};
{% endhighlight %}

Adding this in to main.js, we get the completed controller as shown below:

{% highlight javascript %}
angular.module('repl',[])
       .controller('mainCtrl', ['$scope',function mainCtrl($scope){
          $scope.input = true;

          $scope.back = function(){
            $scope.input = true;
          };

          $scope.submit = function(text){
            $scope.input = false;

            var fs = require('fs');
            var exec = require('child_process').exec;

            fs.writeFile('myScript.js',text,function(){
              var child = exec('node myScript.js',function(err,res){
                $scope.output = res;
                $scope.$apply();
              });
            });
          };
        }]);
{% endhighlight %}


## Run Your REPL

Now run the application to see your JavaScript REPL in action!

On OSX:

`$ /path/to/node-webkit.app/Contents/MacOS/node-webkit .`

On another OS:

`$ /path/to/nw .`


####Before submit:
<div>
  <img src="/img/webkit_imgs/input.png">
</div>

####After submit:
<div>
  <img src="/img/webkit_imgs/output.png">
</div>










