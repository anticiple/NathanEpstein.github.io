---
layout: post
author: Nathan Epstein
title:  "JavaScript as a Data Language"
date:   2015-02-26 12:00:00
categories: jekyll update
img: "../img/JS.png"
---

###Introduction

For most people, the idea of using JavaScript as a data analysis language is intuitively ridiculous. The following are some notes on why this might not be the case.

###Popularity

The obvious reason to consider JS as a data analysis langauge is its general popularity. As, arguably, the most widely used programming language it has an extremely robust open source community.

<img src="/../img/langs.png">

Given basic infrastructure (something like a data frame, well implemented convenience methods for summary statistics, etc.) it's reasonable to believe that libraries for specific applications could be quickly developed.

###Computer Time & Ease of Contribution

JavaScript V8 is pretty fast. People aren't used to thinking of JS as being a performant language; it's a fairly recent development. But the fact is that JS generally runs faster (see these <a href="http://julialang.org/benchmarks/">performance benchmarks</a>) than both R and Python, the two <a href="http://www.kdnuggets.com/2013/08/languages-for-analytics-data-mining-data-science.html">most widely used</a> data analysis languages.

It could be argued that Python data analysis is faster because major chunks of the popular libraries (pandas, NumPy, etc.) are written in C. However, this language gap means that many of the end users of these libraries are unable to contribute to them. This is certainly a drag on the development of the open source tools.

###Math

JavaScript is frequently criticized for its issues with floating point arithmetic. It's worth noting that this issue is not unique to JS. Python, R, and Javascript all follow the <a href="http://en.wikipedia.org/wiki/IEEE_floating_point">IEEE Standard for Floating-Point Arithmetic (IEEE 754)</a>.

There is a difference in the availability of functions which are optimized to avoid aggregation of floating point errors. But this is not an inherent limitation of JavaScript.

###Asynchronous

Asynchronicity in JavaScript may be an enormous convenience in data analysis. It is often the case that you need to make several API calls that take non-negligable amounts time to run. In most languages, this means multi-threading or simply accepting the time lost to blocking API calls. In javascript, such a situation is quite simple to address asynchronously.

{% highlight javascript %}

APIs.foreach(function(api){
  getSomething(api, function(something){
    doSomething(something);
  });
});

{% endhighlight %}

###Single Language Apps

One of the major advantages of JavaScript is that it can be used to easily develop single-language applications (fullstack web apps - it's the only language that can run in the browser, mobile applications with frameworks like Ionic, and desktop applications via nw.js). A major benefit of this language uniformity is that it allows developers to avoid context shifting.

For applications that include extensive data analysis, being able to integrate that analysis without requiring context shifting is certainly valuable. Ultimately, this means that developing tools for data analysis will be an important part of maintaining JavaScript's usefulness as a means to build single-language applications.

###Comparison

The following table ranks JavaScript, Python, R, and Julia as data analysis languages in the categories of existing infrastructure, speed, visualization, and open source community. Infrastructure is determined based on which language is most used for data analysis (following the rankings in the article linked above), speed follows the Julia website benchmarks, visualization is determined by stars on the repo for the most popular visualization library (D3, matplotlib, ggplot2, and Gadfly), and open source community follows the RedMonk language rankings. The highest rank is 1, the lowest is 4.

Obviously, this approach is imperfect but it does effectively highlight the potential for JavaScript.

<img src="/../img/langtable.png">

JavaScript beats R and Python on every dimension except existing infrastructure, which is arguably the easiest thing to change. Importantly, JavaScript has the most robust open source community which makes closing the infrastructure gap a more manageable problem.

None of this is to say that JavaScript should/will replace other popular data analysis languages. However, it does suggest that there's good reason to consider JavaScript as an important part of the data analysis ecosystem.



